extends revealjs

block slides
  section
    h1 Loopy loops
  
  section
    h2 List review
    pre.fragment
      code.hljs.
        >>> foods = ['pizza', 'ice cream']
    p.fragment get the zeroth (really the first) item
    pre.fragment
      code.hljs.
        >>> mylist[0]
        'pizza'
    p.fragment get the first (really second)
    pre.fragment
      code.hljs.
        >>> mylist[1]
        'ice cream'
  
  section
    h2 For-each loops
    pre
      code for thing in list:
    p It says "for each thing in the list"
    pre.fragment
      code for
    pre.fragment
      code thing (a new variable name)
    pre.fragment
      code in
    pre.fragment
      code list (or any list)
    pre.fragment
      code :
    p.fragment indented code
  
  section
    h2 For each item in list
    pre.fragment
      code.hljs.
        >>> menu = ['pizza', 'ice cream', 'candy']
    pre.fragment
      code.hljs.
        >>> for food in menu:
        ...     print(food)
        pizza
        ice cream
        candy
  
  section
    h2 For each letter in string
    p.fragment For-each loops don't just work on lists
    p.fragment It works on strings, lists, and other objects
    pre.fragment
      code.hljs.
        >>> for letter in 'word':
        ...     print(letter)
        w
        o
        r
        d
  
  section
    h2 For each number in range
    p.fragment For-each loops work on #[code range]s
    p.fragment Range from 0 to 5 is #[range(0, 5)]
    pre.fragment
      code.hljs.
        >>> for number in range(0, 5):
        ...     print(number)
        0
        1
        2
        3
        4
  
  section
    p.fragment Does #[code range(0, 5)] include 0? Does it include 5?
    p.fragment Yes for 0, No for 5.
    p.fragment Why?
    p.fragment A five-long list would start at 0 and end at 4.
  
  section
    h3 Example
    pre.fragment
      code.hljs.
        >>> menu = ['pizza', 'ice cream', 'candy', 'rice', 'chicken']
        >>> # menu is 5-long
    pre.fragment
      code.hljs.
        >>> # first food
        >>> menu[0]
        'pizza'
    pre.fragment
      code.hljs.
        >>> # last food
        >>> menu[4]
        'chicken'
    pre.fragment
      code.hljs.
        >>> menu[5]
        IndexError: list index out of range
  
  section
    pre.fragment
      code.hljs.
        >>> menu = ['pizza', 'ice cream', 'candy', 'rice', 'chicken']
        >>> for number in range(0, 5):
        ...     print('trying', number)
        ...     print(menu[number])
        trying 0
        pizza
        trying 1
        ice cream
        trying 2
        candy
        trying 3
        rice
        trying 4
        chicken
    p.fragment Good thing it doesn't try 5
  
  section
    section
      h2 Exercise: 1 + 2 + 3 + ... + n
      pre.fragment
        code.hljs.
          # To get you started:
  
          # input n from the user
          # for-loop
              # add to counter
          # print result
  
    section
      pre
        code.hljs.
          print('Sum of numbers up to what?')
          n = int(input())
  
          counter = 0
          for number in range(1, n):
              counter = counter + number
  
          print(counter)
  
  section
    section
      h2 Exercise: approximate pi
      p
        //- \( 1 \,-\, \frac{1}{3} \,+\, \frac{1}{5} \,-\, \frac{1}{7} \,+\, \frac{1}{9} \,-\, \cdots \,=\, \frac{\pi}{4} \)
        img(src="http://latex.codecogs.com/gif.latex?%5Cbg_white%20%5CLARGE%201%20%5C%2C-%5C%2C%20%5Cfrac%7B1%7D%7B3%7D%20%5C%2C&plus;%5C%2C%20%5Cfrac%7B1%7D%7B5%7D%20%5C%2C-%5C%2C%20%5Cfrac%7B1%7D%7B7%7D%20%5C%2C&plus;%5C%2C%20%5Cfrac%7B1%7D%7B9%7D%20%5C%2C-%5C%2C%20%5Ccdots%20%5C%2C%3D%5C%2C%20%5Cfrac%7B%5Cpi%7D%7B4%7D")
      p Wikipedia: <a href="https://en.wikipedia.org/wiki/Leibniz_formula_for_Ï€">Leibniz formula for pi</href>
